
import React, { useState, useCallback } from 'react';
import { fetchQuizQuestions } from './services/geminiService';
import { QuizQuestion, GameState } from './types';
import QuestionCard from './components/QuestionCard';
import ResultsCard from './components/ResultsCard';
import Spinner from './components/Spinner';
import { BrainIcon } from './components/Icon';

const App: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>('idle');
  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [isAnswered, setIsAnswered] = useState(false);

  const startGame = useCallback(async () => {
    setGameState('loading');
    const fetchedQuestions = await fetchQuizQuestions();
    setQuestions(fetchedQuestions);
    setScore(0);
    setCurrentQuestionIndex(0);
    setSelectedAnswer(null);
    setIsAnswered(false);
    setGameState('playing');
  }, []);

  const handleAnswer = (answer: string) => {
    if (isAnswered) return;

    setIsAnswered(true);
    setSelectedAnswer(answer);
    if (answer === questions[currentQuestionIndex].correctAnswer) {
      setScore(prevScore => prevScore + 1);
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prevIndex => prevIndex + 1);
      setIsAnswered(false);
      setSelectedAnswer(null);
    } else {
      setGameState('finished');
    }
  };

  const restartGame = () => {
    setGameState('idle');
  };

  const renderContent = () => {
    switch (gameState) {
      case 'loading':
        return <Spinner />;
      case 'playing':
        return (
          <QuestionCard
            question={questions[currentQuestionIndex]}
            questionNumber={currentQuestionIndex + 1}
            totalQuestions={questions.length}
            onAnswer={handleAnswer}
            onNext={handleNextQuestion}
            isAnswered={isAnswered}
            selectedAnswer={selectedAnswer}
          />
        );
      case 'finished':
        return (
          <ResultsCard
            score={score}
            totalQuestions={questions.length}
            onRestart={restartGame}
          />
        );
      case 'idle':
      default:
        return (
          <div className="text-center text-white">
            <div className="p-6 bg-gray-800/50 backdrop-blur-sm rounded-full inline-block mb-6 border-2 border-blue-500/50 shadow-lg">
                <BrainIcon className="w-20 h-20 text-blue-400"/>
            </div>
            <h1 className="text-5xl font-extrabold mb-4 tracking-tight">Gemini Quiz Game</h1>
            <p className="text-xl text-gray-300 mb-8 max-w-xl mx-auto">
              Test your knowledge with a unique quiz generated by AI. Every round is a new challenge!
            </p>
            <button
              onClick={startGame}
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-10 rounded-full text-2xl shadow-2xl transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-500/50"
            >
              Start Quiz
            </button>
          </div>
        );
    }
  };

  return (
    <main className="min-h-screen w-full bg-gray-900 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))] flex items-center justify-center p-4">
      <div className="w-full transition-all duration-500 ease-in-out flex items-center justify-center">
          {renderContent()}
      </div>
    </main>
  );
};

export default App;
